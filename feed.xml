<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">I am Yihang</title>
<subtitle type="text">Documentation of stuff that I do</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://www.yihangho.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://www.yihangho.com" />
<updated>2014-04-22T23:39:04+08:00</updated>
<id>http://www.yihangho.com/</id>
<author>
  <name>Yihang Ho</name>
  <uri>http://www.yihangho.com/</uri>
  <email>me@yihangho.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Spritz for Jekyll]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/spritz-for-jekyll" />
  <id>http://www.yihangho.com/spritz-for-jekyll</id>
  <published>2014-04-22T00:00:00+08:00</published>
  <updated>2014-04-22T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.spritzinc.com/&quot;&gt;Spritz&lt;/a&gt; - a technology attempts to speed up human reading speed with little to no training. If you are interested to know how it works, they have prepared a a pretty interesting &lt;a href=&quot;http://www.spritzinc.com/the-science/&quot;&gt;article&lt;/a&gt;, but in short, instead of having your eyes moving around a lot while reading, Spritz keep your eyes fixed at one point, and move the text instead.&lt;/p&gt;

&lt;p&gt;Today, I am finally invited to try out their SDK, and the first thing I do is to write a plugin for Jekyll that simplifies that process of integrating Spritz on Jekyll-powered site. &lt;a href=&quot;https://github.com/yihangho/spritz-for-jekyll&quot;&gt;Spritz for Jekyll&lt;/a&gt; is a Ruby gem. Setting it up should be really simple - the only hurdle is to get register with Spritz.&lt;/p&gt;

&lt;p&gt;Do give it a try!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/spritz-for-jekyll&quot;&gt;Spritz for Jekyll&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on April 22, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Biology and Computer Science]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/biology-and-computer-science" />
  <id>http://www.yihangho.com/biology-and-computer-science</id>
  <published>2014-04-06T00:00:00+08:00</published>
  <updated>2014-04-06T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;Note: This essay contains some stuff about Biology, and I am no expert in Biology, as a result, what I say here might not be 100% accurate.&lt;/p&gt;

&lt;p&gt;Biology has always been my least favorite subject among the three main branches of science. However, I am happy that I have learned something really enjoyable in Biology, something very similar to what I know in Computer Science.&lt;/p&gt;

&lt;p&gt;As most people know, deep in our cells, we have something called DNA (deoxyribonucleic acid). DNA is actually a pair of helix polymer strands. Each strand consists of nucleotide monomers, which are held together by phosphodiester bonds. Each nucleotide molecule is made up of deoxyribose (a pentose sugar), phosphate group and nitrogen base. In the context of DNA, there are four types of nitrogen base: adenine (A), cytosine (C), guanine (G) and thymine (T). Nitrogen bases come in pairs - one on each side of the double helix structure. Also, adenine will always pair with thymine, and cytosine will always pair with guanine. For example, if adenine appears on one of the strands, thymine will appear on the other strand at the similar position as adenine. These pairs are held together by hydrogen bonds.&lt;/p&gt;

&lt;p&gt;What is so interesting about nitrogen bases is that they are the ones which carry important genetic information like how to produce various protein molecules. The idea behind the beauty of DNA is very similar to that of encoding systems like ASCII and UTF-8.&lt;/p&gt;

&lt;p&gt;Let’s consider the ASCII encoding. ASCII defines how common characters — like the 52 alphabets (uppercase and lowercase letters), the ten Arabic digits, and some punctuation — can be represented and stored in a computer system. Essentially, computers operate by the bits, which have two possible states each. A byte, however, is a string of eight contiguous bits. As a result, each byte can store exactly 2^8 = 256 different information. The modern version of ASCII uses all 256 values, all the way from 0 to 255. For example, value 65 represents the character &lt;code&gt;A&lt;/code&gt;, value 126 represents a tilde, &lt;code&gt;~&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;As for DNA, there is actually a very similar system. Each nucleotide has three possible “states”: A, C, G and T; a set of three contiguous nucleotides form a codon. Now, there are some interesting similarities between a computer and DNA: in DNA, a “bit” has four possible states, compared to a binary bit, which has two possible states; a “byte” (codon) is made up of 3 “bits”, compared to computer bytes, which is made up of eight bits; a codon can store 4^3 = 64 different information, while a byte can store 256 different information. What is more interesting is that there is actually an encoding system defined for protein structures. A protein structure is a string of smaller units, called amino acids. There are 20 possible amino acids that will be used to synthesize protein molecules. Each possible “state” of a codon represents one of the 20 amino acids. For example, &lt;code&gt;GGT&lt;/code&gt; represents glycine, &lt;code&gt;TGG&lt;/code&gt; represents tryptophan, and so on.&lt;/p&gt;

&lt;p&gt;Computer memory is like a very long row of cells, each cell can hold either 0 or 1. Each cell has an address, which is actually just a number. Hence, when a program runs, it needs addresses in order to access information in the memory cells. Besides that, the program also needs to know when to stop reading. For programs written in C/C++, the stopping positions are set to 0, which is also known as the null character. In other words, given an address, a program can read from that address, go to the next cell, and the next, and so on until it sees the null character.&lt;/p&gt;

&lt;p&gt;Quite surprisingly, there is also a similar system for living things. A strand of the nucleotides is like computer memory. The differences are: each “cell” (nucleotide) can hold either A, C, G or T, and (I think) there is no such thing as memory address. So how does the &lt;em&gt;thing&lt;/em&gt; that actually reads the DNA sequence to produce protein structures know where to start and stop reading? Well, Mother Nature has some clever schemes. Each protein structure &lt;em&gt;must&lt;/em&gt; (yes, it is universal, it doesn’t matter if you are a human, a t-rex, an oak tree, etc.) start with the amino acid called methionine, represented by ATG and end with ochre (TAA), amber (TAG) or opal (TGA). Hence, TAA, TAG and TGA are like the null character in C/C++. When that &lt;em&gt;thing&lt;/em&gt; is trying to build a protein structure and is trying to look for the “recipe”, it will look for ATG, starts reading from there and continue until it sees a TAA, TAG or TGA.&lt;/p&gt;

&lt;p&gt;Note: If you check any textbook or the Internet, you might think that the genetic codes that I use here are wrong. The problem is that you will never see thymine (T) in those code tables. This is because those tables show the nucleotide sequence in an &lt;em&gt;RNA&lt;/em&gt; strand, not a DNA strand, but I am referring to DNA here. RNA is the small brother of DNA. RNA is made up of a single strand instead of a pair of helix. Also, thymine will never appear in RNA, its place is taken over by uracil (U). In this context, the role of RNA is to act as a middle man between DNA and the &lt;em&gt;thing&lt;/em&gt; that produces protein.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/biology-and-computer-science&quot;&gt;Biology and Computer Science&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on April 06, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Ruboto]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/ruboto" />
  <id>http://www.yihangho.com/ruboto</id>
  <published>2014-03-18T00:00:00+08:00</published>
  <updated>2014-03-18T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;There are many mobile app development frameworks out there. Most of those frameworks attempt to solve one big problem - compatibility across the many mobile platforms. The idea is to write your app once, and compile to run on all (or at least most) major mobile platforms. Personally, I have tried &lt;a href=&quot;http://phonegap.com/&quot;&gt;PhoneGap&lt;/a&gt;, and also have heard that &lt;a href=&quot;http://www.appcelerator.com/titanium/&quot;&gt;Titanium&lt;/a&gt; is pretty neat too.&lt;/p&gt;

&lt;p&gt;Today, I found &lt;a href=&quot;http://ruboto.org/&quot;&gt;Ruboto&lt;/a&gt;. Ruboto is fundamentally different from PhoneGap and Titanium. Ruboto compiles &lt;em&gt;only&lt;/em&gt; to Android. Ruboto is made possible by &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt;, an implementation of Ruby using Java. JRuby allows Ruby code calling Java libraries, and Java code calling Ruby libraries. As such, it is natural to have something like Ruboto.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The installation process of Ruboto is relatively straightforward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get an implementation of Ruby. I guess it makes sense to use JRuby in this case. I strongly recommend using &lt;a href=&quot;http://rvm.io/&quot;&gt;RVM&lt;/a&gt; to install and manage various versions and implementations of Ruby.&lt;/li&gt;
  &lt;li&gt;Get the &lt;a href=&quot;https://developer.android.com/sdk/index.html&quot;&gt;Android SDK&lt;/a&gt; and follow the &lt;a href=&quot;https://developer.android.com/sdk/installing/bundle.html&quot;&gt;setup guide&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Apparently you need Android API 10 and Intel HAXM. &lt;a href=&quot;http://software.intel.com/en-us/android/articles/speeding-up-the-android-emulator-on-intel-architecture#_Toc358213269&quot;&gt;Installation guide for Intel HAXM&lt;/a&gt; (At the time of writing, this guide does not include any instruction for OS X, but the instructions for Windows (surprisingly) work on OS X, too.)&lt;/li&gt;
  &lt;li&gt;Also, install a newer Android API. I installed Android API 19, which corresponds to KitKat 4.4.2.&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;http://ant.apache.org/&quot;&gt;ANT&lt;/a&gt;. (&lt;code&gt;brew install ant&lt;/code&gt; if you are using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Install the &lt;a href=&quot;https://rubygems.org/gems/jruby-jars&quot;&gt;jruby-jars&lt;/a&gt; gem. (&lt;code&gt;gem install jruby-jars&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Configure the &lt;code&gt;ANDROID_HOME&lt;/code&gt; environment variable. (Set it to point to the &lt;strong&gt;absolute path&lt;/strong&gt; of the &lt;code&gt;sdk&lt;/code&gt; directory of the Android SDK that you have installed in step 2. Make sure that you are using absolute page, according to the documentation of Ruboto, Java does not expand &lt;code&gt;~&lt;/code&gt;.)&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;ruboto setup&lt;/code&gt; to iron out any other problems.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;create-an-app&quot;&gt;Create an app&lt;/h2&gt;
&lt;p&gt;Ruboto comes with a code generator. Run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
ruboto gen app --package com.example.test --name test --target android-19
cd test
rake
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;rake&lt;/code&gt; will build the APK file, which will be located in &lt;code&gt;bin/Test-debug.apk&lt;/code&gt;. If you have configured a virtual device, or have connected an Android device to your machine, you can run &lt;code&gt;rake install&lt;/code&gt; to install the app.&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;The documentation for Ruboto is incomplete, almost can be considered non-existent. I am still in the process of figuring out the API and stuff like that.&lt;/li&gt;
  &lt;li&gt;The compiled APK is huge. There are two ways of building your app. The way that we did here will produce a relatively small APK, but it requires another app, &lt;a href=&quot;https://play.google.com/store/apps/details?id=org.ruboto.core&quot;&gt;Ruboto Core&lt;/a&gt;. To avoid this, you can compile your code together with the necessary libraries by using the &lt;code&gt;--with-jruby&lt;/code&gt; flag when running the &lt;code&gt;gen app&lt;/code&gt; command. The resulting APK is much larger. For this particular example, we have ~9MB vs ~80KB. Also it takes a longer time to compile (2 mins 16 sec vs 8 sec).&lt;/li&gt;
&lt;/ol&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/ruboto&quot;&gt;Ruboto&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on March 18, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Emoji for Jekyll as a Ruby Gem]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/emoji-for-jekyll-as-a-ruby-gem" />
  <id>http://www.yihangho.com/emoji-for-jekyll-as-a-ruby-gem</id>
  <published>2014-02-22T00:00:00+08:00</published>
  <updated>2014-02-22T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;A little while ago I wrote a &lt;a href=&quot;https://github.com/yihangho/emoji-for-jekyll&quot;&gt;plugin&lt;/a&gt; for &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; that helps enabling Emoji on sites generated by Jekyll. It is really easy to use - just grab a copy of the plugin and copy two files over to your Jekyll project.&lt;/p&gt;

&lt;p&gt;Today, I am taking the easiness of using this plugin to a new level. &lt;a href=&quot;http://rubygems.org/gems/emoji_for_jekyll&quot;&gt;Emoji for Jekyll&lt;/a&gt; is now available as a Ruby Gem.&lt;/p&gt;

&lt;p&gt;If you are using or planning to use Emoji for Jekyll, I encourage you do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install the emoji_for_jekyll gem:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;    gem install emoji_for_jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Remove the older version of Emoji for Jekyll from the &lt;code&gt;_plugins&lt;/code&gt; directory. You can remove &lt;code&gt;emoji-for-jekyll.rb&lt;/code&gt; and &lt;code&gt;emojis.rb&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enable the new Emoji for Jekyll in &lt;code&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;emoji_for_jekyll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All the existing APIs are still working. You can go ahead and include something like &lt;code&gt;:laughing:&lt;/code&gt; in your posts and expect beautiful emojis! &lt;img class=&quot;emoji&quot; title=&quot;smile&quot; alt=&quot;smile&quot; src=&quot;https://github.global.ssl.fastly.net/images/icons/emoji/smile.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/emoji-for-jekyll-as-a-ruby-gem&quot;&gt;Emoji for Jekyll as a Ruby Gem&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on February 22, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Setting up Contest Management System]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/setting-up-contest-management-system" />
  <id>http://www.yihangho.com/setting-up-contest-management-system</id>
  <published>2014-02-09T00:00:00+08:00</published>
  <updated>2014-02-09T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;I spent the weekend trying to set up the &lt;a href=&quot;https://github.com/cms-dev/cms&quot;&gt;Contest Management System&lt;/a&gt; (CMS) used during IOI 2012 and 2013 for the coming &lt;a href=&quot;http://ioimalaysia.org/&quot;&gt;Malaysia Computing Olympiad&lt;/a&gt; (MCO). After some tinkering, I manage to get the CMS to work, and we plan to have a trial soon.&lt;/p&gt;

&lt;p&gt;I am using v1.0.1 of CMS (get a copy &lt;a href=&quot;https://github.com/cms-dev/cms/releases&quot;&gt;here&lt;/a&gt;) on Ubuntu 12.04 LTS. Take note that if you are using v1.0.1, then you &lt;strong&gt;must&lt;/strong&gt; use the 32-bit version of Ubuntu (or any other OS). The &lt;a href=&quot;https://cms.readthedocs.org/en/v1.0/&quot;&gt;documentation&lt;/a&gt; is very complete, but there are some tiny problems that I have to figure out myself.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After setting up the database, before running the CMS, you need to create a contest first. A really easy way to do this will be to just import the sample contest.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;$ git clone https://github.com/cms-dev/con_test.git&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;$ cmsYamlImporter con_test&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;and you’re done.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;According to the &lt;a href=&quot;https://cms.readthedocs.org/en/v1.0/External%20contest%20formats.html&quot;&gt;documentation for the importer&lt;/a&gt;, the importer currently uses quite a lot of Italian terms. As a result, you will have to constantly refer to the documentation to design your own contest.&lt;/li&gt;
  &lt;li&gt;As of v1.0.1, there are some weird behavior with the importer. First of all, for all tasks that are using the GroupMin (and possibly GroupMul also), the total score across all subtasks must be 100. If you need to configure your task such that the total score is not 100, you can remove &lt;a href=&quot;https://github.com/cms-dev/cms/blob/v1.0/cmscontrib/YamlImporter.py#L301&quot;&gt;line 301 of &lt;code&gt;cmscontrib/YamlImporter.py&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Also, somehow &lt;code&gt;token_gen_time&lt;/code&gt; for individual task is not reflected.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://cms.readthedocs.org/en/v1.0/Running%20CMS.html#id1&quot;&gt;documentation for “Running CMS”&lt;/a&gt; is somewhat incomplete. Before running &lt;code&gt;cmsResourceService -a&lt;/code&gt;, you need to run &lt;code&gt;cmsRankingWebServer &amp;amp;&lt;/code&gt;, or &lt;code&gt;nohup cmsRankingWebServer &amp;amp;&lt;/code&gt; on actual production server.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;If, after running &lt;code&gt;cmsResourceService -a&lt;/code&gt;, all the child processes restart over and over again, as mentioned &lt;a href=&quot;https://cms.readthedocs.org/en/v1.0/Troubleshooting.html#configuration&quot;&gt;here&lt;/a&gt;, kill the &lt;code&gt;cmsResourceService&lt;/code&gt;, then run &lt;code&gt;ps aux&lt;/code&gt; and look for the entry for &lt;code&gt;cmsLogService&lt;/code&gt;. Take note how the how line looks like. Most likely, it is something like &lt;code&gt;/usr/bin/python2 /usr/local/bin/cmsLogService&lt;/code&gt;. Now check your &lt;code&gt;cms.conf&lt;/code&gt; around &lt;a href=&quot;https://github.com/cms-dev/cms/blob/v1.0/examples/cms.conf.sample#L143&quot;&gt;line 143&lt;/a&gt;, make sure each component matches what you see in &lt;code&gt;ps aux&lt;/code&gt;. Most likely you will have to change &lt;code&gt;/usr/bin/python&lt;/code&gt; to &lt;code&gt;/usr/bin/python2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If, after submitting a solution to any task, and somehow all the solutions cannot be compiled, just like what is described in this &lt;a href=&quot;https://github.com/cms-dev/cms/issues/245&quot;&gt;issue&lt;/a&gt;, well, the solution is right there.&lt;/li&gt;
&lt;/ol&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/setting-up-contest-management-system&quot;&gt;Setting up Contest Management System&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on February 09, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Linux Mint on MacBook Pro]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/linux-mint-on-macbook-pro" />
  <id>http://www.yihangho.com/linux-mint-on-macbook-pro</id>
  <published>2014-01-29T00:00:00+08:00</published>
  <updated>2014-01-29T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;A few days ago, I tried installing Linux Mint on my MacBook Pro. The whole process was relatively smooth, here is how I did it. For the record, I was installing Linux Mint 16 “Petra” Cinnamon 32-bit, and my MacBook Pro is the non-retina 13-inch, Mid 2012 version. I think the installation process is more or less the same for Ubuntu and other MacBooks. I used &lt;a href=&quot;https://help.ubuntu.com/community/MactelSupportTeam/AppleIntelInstallation&quot;&gt;this guide&lt;/a&gt; provided by the Mactel Team as a general pointer.&lt;/p&gt;

&lt;h2 id=&quot;creating-liveusb&quot;&gt;Creating LiveUSB&lt;/h2&gt;
&lt;p&gt;I followed the guide on Ubuntu’s site &lt;a href=&quot;http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-mac-osx&quot;&gt;here&lt;/a&gt; to create the LiveUSB containing Linux Mint.&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-partition&quot;&gt;Create a new partition&lt;/h2&gt;
&lt;p&gt;I used the Disk Utility to create a new partition. Due to the fact that Linux does not recognize HFS, you have to format the new partition as FAT-32.&lt;/p&gt;

&lt;h2 id=&quot;installing-refit&quot;&gt;Installing rEFIt&lt;/h2&gt;
&lt;p&gt;I downloaded rEFIt from &lt;a href=&quot;http://refit.sourceforge.net/#download&quot;&gt;here&lt;/a&gt;. Here’s a little bit of spoiler - I &lt;em&gt;think&lt;/em&gt; rEFIt is not necessary to install any Linux on a Mac. I have not touched rEFIt from start to end, and end up uninstalling it following this &lt;a href=&quot;http://refit.sourceforge.net/doc/c1s3_remove.html&quot;&gt;guide&lt;/a&gt;. If you are willing to take the risk, try to go on without rEFIt and let me know if it works.&lt;/p&gt;

&lt;h2 id=&quot;boot-to-liveusb&quot;&gt;Boot to LiveUSB&lt;/h2&gt;
&lt;p&gt;Now, reboot the machine. As the machine is starting up, press and hold on to the &lt;kbd&gt;option&lt;/kbd&gt; key until you see a list of drives/partitions to choose from. Choose “Windows” with a USB symbol on it. Choose something like “Try Linux Mint” when presented with a list of options (instead of “Install Linux Mint”).&lt;/p&gt;

&lt;h2 id=&quot;install-linux-mint&quot;&gt;Install Linux Mint&lt;/h2&gt;
&lt;p&gt;Now, you should be able to see an icon on desktop to install Linux Mint. Click on it. You will then be presented with a wizard to guide you through the installation process. For me, the installer recognizes that I am on a Mac and asked if I want to keep OS X and install Linux Mint beside it or replace OS X with Linux Mint. I chose the former. After that, the installer also chose the correct partition to install to. Just make sure that that partition is indeed the correct one.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/linux-mint-on-macbook-pro&quot;&gt;Linux Mint on MacBook Pro&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on January 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[D-Code Bootcamp Silicon Valley - City Hall, Nathan Gold and Torsten Kolind]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/d-code-bootcamp-silicon-valley-city-hall-nathan-gold-and-torsten-kolind" />
  <id>http://www.yihangho.com/d-code-bootcamp-silicon-valley-city-hall-nathan-gold-and-torsten-kolind</id>
  <published>2013-12-04T00:00:00+08:00</published>
  <updated>2013-12-04T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;The 3rd of December started with a morning walk with the other D-Coders and John to the City Hall to attend a conference specially prepared for us by the Mayor’s Office of Civic Innovation (MOCI). The City Hall is the architectural pride of the City of San Francisco - it consists of a dome that is bigger than the Capitol and decorated with gold. We were given a short tour around the City Hall by one of the members of MOCI.&lt;/p&gt;

&lt;p&gt;The conference held by MOCI was mainly about the city government’s effort in encouraging and helping innovation in the city. One of the policies that really impressed me was the Open Data initiative. Under this initiative, all agencies, departments and offices of the city government are required by city legislation to publish and release all data that they have. This data is starting to be published in &lt;a href=&quot;http://data.sfgov.org&quot;&gt;http://data.sfgov.org&lt;/a&gt;. Also, their Open Law initiative is very interesting. Under this initiative, the city government published all the state laws online on GitHub, allowing the citizens and residents to refer and monitor the changes that happened to all the state legislation. The city government has also set up what is now called Living Innovation Zones (LIZ). Innovators are now able to use public spaces designated as LIZ to test out their ideas. The very first LIZ was along Market Street and it has attracted tonnes of tourists, effectively transformed a boring sidewalk into an exciting spot to visit.&lt;/p&gt;

&lt;p&gt;The conference struck me so deeply because an entity as small as a city government is willing and able to transform itself from a “traditional” government to an open government. Also, its willingness to embrace technology, like the use of GitHub, is really impressive.&lt;/p&gt;

&lt;p&gt;The following activities of the day happened in the office of YouNoodle. After enjoying the delicious sourdough pizza, we met Nathan Gold, a very successful coach in helping others crafting an effective pitch and presentation. Nathan gave us some very valuable advice, like S2AME and story matrix. At the end of the workshop, each team was given the opportunity to pitch in front of other D-Coders and Noodlers with Nathan leading the pack brainstorming ways to improve each pitch.&lt;/p&gt;

&lt;p&gt;Finally, the CEO and co-founder of YouNoodle, Torsten Kolind gave us an introduction on how the startup ecosystem in San Francisco works, and his story of beginning with a startup in Denmark to founding YouNoodle with Rebecca Hwang. Torsten demystified and explained some of the startup terminologies like angel, venture capital and ramen profitability. In my opinion, the most important advice that Torsten gave was to offer help before asking for help.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/d-code-bootcamp-silicon-valley-city-hall-nathan-gold-and-torsten-kolind&quot;&gt;D-Code Bootcamp Silicon Valley - City Hall, Nathan Gold and Torsten Kolind&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on December 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[D-Code Bootcamp Silicon Valley - Rushing and Waiting]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/d-code-bootcamp-silicon-valley-rushing-and-waiting" />
  <id>http://www.yihangho.com/d-code-bootcamp-silicon-valley-rushing-and-waiting</id>
  <published>2013-12-03T00:00:00+08:00</published>
  <updated>2013-12-03T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;“The first step of a journey is always the hardest.”&lt;/p&gt;

&lt;p&gt;This idiom holds true for D-Code Bootcamp Silicon Valley. For me, I needed four flights from three different airlines to get from Penang to San Francisco.&lt;/p&gt;

&lt;p&gt;Everything went fine until we were at Guang Zhou Baiyun International Airport. First of all, everything that was sold there was at least five times above the usual price. Next, our flight from Guang Zhou to Los Angeles was delayed by two hours, which made all of us extremely demotivated, tired and hungry.&lt;/p&gt;

&lt;p&gt;When we finally arrived at Los Angeles, we had about 45 minutes before our next flight. One of the employees of the previous airline that we flew, China Southern Airline, was looking for us, giving out boarding passes for our next flight and an express connection tickets that allowed us to quickly complete the immigration process. Unfortunately, Los Angeles International Airport was a really huge airport, and we had to walk/run quite a distance, stopping once in a while to ask airport staffs to make sure that we were heading the correct way. We had only four minutes when we finally reached Virgin America check-in counter. Not surprisingly, the plane left without us, and the next flight to San Francisco was about nine hours later. We had no choice but to liaise with both China Southern Airline and Virgin America to put us on the next flight, and get a place for us to sleep over the night.&lt;/p&gt;

&lt;p&gt;The lady at the Virgin America counter was working really hard to get us tickets to one of the flights the next day. On the other hand, I am not very sure what they did, but it took the employees of China Southern Airline so long to get us hotel rooms and reimbursement that we finished our first American meal while we were waiting to receive our compensation.&lt;/p&gt;

&lt;p&gt;It was lucky that Arul and Yew Peh got on the same flight with the rest of us as they were arranged to take the next flight. The flight from Los Angeles to San Francisco offered us the unique Virgin America experience, like their very special safety briefing video, despite the fact that it was a bumpy ride. Just moments after we landed at San Francisco International Airport, we could already see John Valdez from YouNoodle waiting for us. Most of us have met John before during GSY. We were then transferred to the place that we will be staying in for the coming two weeks, that is, the Monroe Residence Club.&lt;/p&gt;

&lt;p&gt;Although the whole flight delay and its aftermath was a tiring and stressful incident, I am actually glad that it happened, because I got to experience how it feels like to “run from one end of the airport to the other”. In fact, Los Angeles International Airport was so big that the more accurate description is to “run from one building of the airport to another”. Also, I would like to thank Heislyc, who was here earlier, for sharing with us all the tips to avoid missing our flight from Los Angeles to San Francisco. Although we did not make it for the original flight, his advice made our lives much easier while we were in Los Angeles.&lt;/p&gt;

&lt;p&gt;Ultimately, all that rushing and waiting was an interesting way to start our trip. Now we’re looking forward to the great experiences Silicon Valley has for us!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/d-code-bootcamp-silicon-valley-rushing-and-waiting&quot;&gt;D-Code Bootcamp Silicon Valley - Rushing and Waiting&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on December 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Articulation Point and Bridge]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/articulation-point-and-bridge" />
  <id>http://www.yihangho.com/articulation-point-and-bridge</id>
  <published>2013-11-16T00:00:00+08:00</published>
  <updated>2013-11-16T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;I was explaining the idea of articulation point and bridge to someone who has never heard of graph theory. That was a little challenging, but fun at the same time.&lt;/p&gt;

&lt;p&gt;Imagine that you run an airline, and your planes fly between a selected set of airports. This scenario actually can be described by a graph - each airport is a node and each flight between two airports is an edge. We call a graph connected if, using our airline analogy, a passenger can start from any airport of her choice, and arrive at any other airport after some finite transits.&lt;/p&gt;

&lt;p&gt;Suppose that one of these airports is forced to shutdown due to a natural disaster. Let’s call this airport X. Clearly, your passengers will not be able to arrive at airport X. However, it is possible that some of the other airports become inaccessible as your passengers need to transit at X to arrive at these airports. For example, our airline flies between, A and X, and X and B. If X is shut down, then passenger from A will not be able to arrive at B and vice versa. Airports like X that break the connectivity of the entire graph when removed are called the articulation points.&lt;/p&gt;

&lt;p&gt;Now, instead of shutting down an airport, one of the many flights becomes unavailable - our airline decided not to fly between X and Y anymore. Again, some of the destinations might become inaccessible. As an example, our airline initially flies between A and X, X and Y, and Y and B. If we stop flying between X and Y, passengers from A will not be able to arrive at B and vice versa. Flights like X-Y that break the connectivity when removed are called bridges.&lt;/p&gt;

&lt;p&gt;The algorithm for finding articulation points and bridges is simple. One naïve way is to remove each possible node and edge, and check if the graph is still connected. This requires V+E DFSes. A better solution can solve this problem with a single DFS, proposed by John Hopcroft and Robert Endre Tarjan. This solution is readily available on the internet. One thing that is possibly confusing about this algorithm is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The root vertex is an articulation point if and only if it has more than 2 children.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This statement refers to the graph formed by DFS, not the original graph itself.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/articulation-point-and-bridge&quot;&gt;Articulation Point and Bridge&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on November 16, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[US Visa Application]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/us-visa-application" />
  <id>http://www.yihangho.com/us-visa-application</id>
  <published>2013-11-15T00:00:00+08:00</published>
  <updated>2013-11-15T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;the-process&quot;&gt;The Process&lt;/h2&gt;

&lt;p&gt;This blog post is by no means authoritative. Please refer to the website of the nearest US Embassy for more information.&lt;/p&gt;

&lt;p&gt;As a result of winning the D-Code bootcamp, I was invited to attend another bootcamp in San Francisco, and as we all know, the first step to visit the US is to get a visa.&lt;/p&gt;

&lt;p&gt;The very first step in applying for a US visa is to determine the type of visa that you need. According to &lt;a href=&quot;http://en.wikipedia.org/wiki/United_States_visas&quot;&gt;Wikipedia&lt;/a&gt; there are about 185 types of visa for you to choose. But for most of the time, you will need non-immigrant B1/B2 visa.&lt;/p&gt;

&lt;p&gt;To apply for almost any type of visa, you have to fill in an electronic form known as DS-160. As soon as you started filling in this form, you will be given an application ID. You should jot down this ID as you will need it to retrieve your incomplete form if you stop half-way. DS-160 basically asks for your personal information, purpose of your travel, family information and finally some security information. At the end of the form, you need to upload your photograph. After you have done everything, you will be shown a confirmation page. You should print this confirmation page as you will be asked to hand in this confirmation page during your interview. It is not difficult to fill in DS-160 as long as you have all the information needed. It took me about two hours to finish filling in the form.&lt;/p&gt;

&lt;p&gt;Next, you will need to pay for the visa application fee. For the US Embassy in Malaysia, the payment is to be made at any Standard Chartered bank. For the B1/B2 visa that I am applying for, the fee is $160, paid in local currency, in my case, Malaysian Ringgit. Before you visit the bank, you should check the current currency exchange at the embassy website, and also, you have to print a copy of deposit slip and bring it to the bank. Each deposit slip has an expiry date, make sure the one that you are bringing to the bank is still valid. Also, you should take jot down your passport number as you will need it to make the payment.&lt;/p&gt;

&lt;p&gt;Now, you are ready to schedule for an appointment. Make sure you have your DS-160 application ID and also your visa fee payment receipt. Just follow the instruction on the website and you are good to go. You will be asked to select how your passport should be delivered to you. Just pick a convenient method for you. Finally, you will be shown the appointment confirmation letter. Print this letter.&lt;/p&gt;

&lt;p&gt;At the day of the interview, arrive as early as possible. For me, my interview slot was at 8:20 a.m., but I arrived at 7:00 a.m. When you arrive, you might already see a long line of queue. Talk to the security guard and he/she will tell you what to do. Then you will be asked to walk to another guard post. Show the guard your appointment confirmation letter and your driving licence and he will give you a visitor pass. You will have to move to another queue, waiting to enter the compound of the embassy.&lt;/p&gt;

&lt;p&gt;As you enter the embassy, your belongings will be checked, and certain items like mobile phones, car keys and chargers have to be surrendered.&lt;/p&gt;

&lt;p&gt;Next, you will be approached by another security guard (Yup, there are so many security guards that you might start wondering at this point if the embassy is run by security guards.) and he will give you a number and usher you to a waiting room where you can sit and wait for your number to be called.&lt;/p&gt;

&lt;p&gt;Your number will be called three times. For the first time it is called, you have to submit your documents like the DS-160 confirmation page, your passport, your photograph and your appointment confirmation letter. Next, your finger prints will be scanned. Finally, you will be called to be interviewed. There should not be any problem answering the interview questions if you have a valid reason to visit the US. Some of the interviewers (like mine) can be very friendly that you feel like it is more a chit-chat session than an interview session. At the end, the interviewer might tell you if your visa is approved or not.&lt;/p&gt;

&lt;p&gt;After the interview, you can leave the embassy and wait for your passport to be delivered (hopefully with a visa inside).&lt;/p&gt;

&lt;h2 id=&quot;my-experience&quot;&gt;My Experience&lt;/h2&gt;

&lt;p&gt;There is not much to say about filling in DS-160 and making the payment. The day of the interview itself is more interesting. As mentioned, I arrived at the embassy 1 hour and 20 minutes before my interview, and 40 minutes before the first interview. As a result, I was the first in the queue among all that are in the same interview slot as me. My father was with me that time, but since I was already above 18 and he was not applying for a visa, he was initially not allowed to enter the embassy. However, after seeing him wander pointlessly outside the embassy, the guards just let him in. &lt;img class=&quot;emoji&quot; title=&quot;smile&quot; alt=&quot;smile&quot; src=&quot;https://github.global.ssl.fastly.net/images/icons/emoji/smile.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The interviewer apparently had interviewed one of the other D-Coders.&lt;/p&gt;

&lt;p&gt;Interviewer: Good morning! So why do you want to go to the United States?&lt;/p&gt;

&lt;p&gt;Me: Good morning! I am going to the US to attend a coding bootcamp.&lt;/p&gt;

&lt;p&gt;Interviewer: Oh! D-Code right?&lt;/p&gt;

&lt;p&gt;Me: Yep. Here’s the invitation.&lt;/p&gt;

&lt;p&gt;Interviewer: How did they select who to go to this bootcamp?&lt;/p&gt;

&lt;p&gt;Me: There was another similar bootcamp earlier on, where we worked on some projects during that bootcamp, and they chose some of the best projects.&lt;/p&gt;

&lt;p&gt;Interviewer: So what’s your project about?&lt;/p&gt;

&lt;p&gt;Me: It’s a universal rating system.&lt;/p&gt;

&lt;p&gt;Interviewer: Tell me more about it.&lt;/p&gt;

&lt;p&gt;Me: Well, you know YouTube, they have their own rating system, right? (He nods.) But that rating system works only on YouTube. What we did was, this rating system basically works on all websites.&lt;/p&gt;

&lt;p&gt;Interviewer: What does this rating means? I mean, what are your users actually rating?&lt;/p&gt;

&lt;p&gt;Me: The quality of the content of the site that they are visiting.&lt;/p&gt;

&lt;p&gt;Interviewer: Oh! I get it now. So you are asking your user to tell you what they think about the content?&lt;/p&gt;

&lt;p&gt;Me: Yup, and then show the average score to the next user.&lt;/p&gt;

&lt;p&gt;Interviewer: Interesting. How many people are there in your group?&lt;/p&gt;

&lt;p&gt;Me: Just two.&lt;/p&gt;

&lt;p&gt;Interviewer: And how many groups are there?&lt;/p&gt;

&lt;p&gt;Me: A total of three groups are chosen to go to the US.&lt;/p&gt;

&lt;p&gt;Interviewer: The expenses is paid by?&lt;/p&gt;

&lt;p&gt;Me: StartupMalaysia. (Show him the scholarship terms and conditions.)&lt;/p&gt;

&lt;p&gt;Interviewer: How long do you plan to stay in the US?&lt;/p&gt;

&lt;p&gt;Me: About two weeks.&lt;/p&gt;

&lt;p&gt;Interviewer: What are you doing in Malaysia, by the way? Working? Studying?&lt;/p&gt;

&lt;p&gt;Me: I’m a student in Penang. (Show him the certification that I am a student.)&lt;/p&gt;

&lt;p&gt;Interviewer: Ah. INTI Penang. What course are you doing there?&lt;/p&gt;

&lt;p&gt;Me: I am doing my A-Levels there. It’s a pre-university course.&lt;/p&gt;

&lt;p&gt;Interviewer: How long have you been there?&lt;/p&gt;

&lt;p&gt;Me: Uh… About 8 months now.&lt;/p&gt;

&lt;p&gt;Interviewer: Alright. Your visa is approved, you will be notified when your visa is ready, and you may collect your passport at the Penang office in 2-3 working days.&lt;/p&gt;

&lt;p&gt;Me: Thanks.&lt;/p&gt;

&lt;p&gt;I was then notified to collect my passport 2 days later. Inside my passport is a newly attached, 10-year, unlimited entries visa. &lt;img class=&quot;emoji&quot; title=&quot;smile&quot; alt=&quot;smile&quot; src=&quot;https://github.global.ssl.fastly.net/images/icons/emoji/smile.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make a copy of everything, including the DS-160 form. You can later refer to this copy and at least not say something that contradicts with what you filled in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Apply early. You never know when will be the next slot for you to be interviewed. For me, I have to wait for about 2 weeks to be interviewed. That is creepy enough already, as I will be travelling 2 weeks after the interview.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start applying as soon as possible. You don’t have to wait for everything to be ready to start applying. Truth is, you don’t need any additional documents to fill in DS-160 and paying the fee. I knew that I will be travelling to the US 1 month before I started applying. But I did not apply, but wait for the invitation to be issued, that was 1 month later. Instead of waiting for the invitation, I can fill in DS-160 and pay the fee first, then schedule an appointment that I think the invitation is ready. Finally, reschedule the interview when the invitation is finally ready.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having said that, don’t reschedule the interview excessively. You can only reschedule a finite (and not very large) number of times before your payment becomes invalid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Print everything &lt;strong&gt;immediately&lt;/strong&gt;. What I did was, I PDF everything that I think I need, then tag those files that need to be printed with a “Print” label. This might sound clever, until you missed out a file or two. I missed out the DS-160 confirmation. Fortunately, a friend of mine reminded me about that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/us-visa-application&quot;&gt;US Visa Application&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on November 15, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Emoji for Jekyll]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/emoji-for-jekyll" />
  <id>http://www.yihangho.com/emoji-for-jekyll</id>
  <updated>2014-02-19T00:00:00-00:00</updated>
  <published>2013-11-09T00:00:00+08:00</published>
  
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;I love the idea of having emojis in my articles. As I have mentioned several times earlier, this site is generated by Jekyll based on contents that I have written in Markdown. As far as I know, only a small amount of Markdown implementation support emoji, and the most famous implementation being GitHub Flavour Markdown. Therefore, I will definitely need some plugins to enable emoji for this site.&lt;/p&gt;

&lt;p&gt;Previously, I found &lt;a href=&quot;https://github.com/chriskempson/jekyll-emoji&quot;&gt;Jekyll Emoji&lt;/a&gt; which actually get the job done. However, there are two things that I don’t like about it&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You have to load &lt;em&gt;all&lt;/em&gt; the images for all the emojis on your server.&lt;/li&gt;
  &lt;li&gt;The plugin act as a filter. That means you have to pass the emoji string to the filter manually using a Liquid tag.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I have in mind is something that does its job automatically, with some fine-grain control when I need it. For example, I want the ability to disable emoji on certain posts by flipping a boolean value in the front matter, and the setup process should be very easy.&lt;/p&gt;

&lt;p&gt;In the end, I decided to write my own plugin, and the best part is, its setup process is super easy. Basically, just copy a Ruby file and a JSON file over to the &lt;code&gt;_plugins&lt;/code&gt; directory, and you are good to go.&lt;/p&gt;

&lt;p&gt;The working principle of this plugin is that it scans &lt;em&gt;all&lt;/em&gt; posts and pages for emoji strings, and then convert them into image tags that load the graphics from GitHub. As a result, you don’t need to keep a copy of all the images. This plugin is designed as a generator, so there is no need to do any extra work to enable emoji. However, you also have the choice to disable emoji for certain posts and pages, and you can also choose to whitelist or blacklist certain emojis.&lt;/p&gt;

&lt;p&gt;Take a look at its &lt;a href=&quot;https://github.com/yihangho/emoji-for-jekyll&quot;&gt;GitHub repository&lt;/a&gt; for more information. &lt;img class=&quot;emoji&quot; title=&quot;smiley&quot; alt=&quot;smiley&quot; src=&quot;https://github.global.ssl.fastly.net/images/icons/emoji/smiley.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/emoji-for-jekyll&quot;&gt;Emoji for Jekyll&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on November 09, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Scribble 2.0]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/scribble-2.0" />
  <id>http://www.yihangho.com/scribble-2.0</id>
  <published>2013-09-16T00:00:00+08:00</published>
  <updated>2013-09-16T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://scribble.yihangho.com&quot;&gt;Scribble&lt;/a&gt; has always been one of the projects that I love the most. Today, Scribble is officially relaunched with quite a bit of improvements. Let me talk a bit about the background of Scribble first.&lt;/p&gt;

&lt;p&gt;One really cool thing about living in this Internet era is that we can communicate with any person at nearly the speed of light. Being a student, this benefits me and my friends a lot. We can have discussion on the Internet - no need to travel to some coffee shops or public libraries. However, one problem that arise is the difficulty to input and transmit math symbols and equations. What we have been doing is not only ugly, but also ambiguous:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1/6x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Does it mean &lt;code&gt;1/(6x)&lt;/code&gt; or &lt;code&gt;(1/6)x&lt;/code&gt;? Some of us might get frustrated and just write down the math equations, capture it using a camera, and send it over. While this might work, there are still a few issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not mobile friendly - have to pinch and swipe a lot to view the entire page&lt;/li&gt;
  &lt;li&gt;Not efficient - images are big&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This problem inspires me to create something to solve this problem. I figured that this thing must be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mobile friendly&lt;/li&gt;
  &lt;li&gt;really hassle free&lt;/li&gt;
  &lt;li&gt;easy to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a result, I created Scribble. I have to say that the previous version is more or less the minimum viable product - almost everything is primitive, and you have to know the LaTeX language to use. After that I decided to sit down and recreate Scribble.&lt;/p&gt;

&lt;p&gt;I present to you Scribble 2.0. It is completely rewritten. Not a single line of code is copied from previous version. Also, I have attempted to solve a very big problem - LaTeX input. My solution is a set of buttons that allows user to select those commonly used symbols, and their LaTeX code will automatically be inserted into the input area. It turns out this part is growing too big and I made it a side project. Its source is available &lt;a href=&quot;https://github.com/yihangho/latex-editor&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the key improvements are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scribble is now hosted on a faster server&lt;/li&gt;
  &lt;li&gt;LaTeX selector&lt;/li&gt;
  &lt;li&gt;More social media sharing is available (We now have Facebook, Google+ and Twitter)&lt;/li&gt;
  &lt;li&gt;Even more mobile-friendly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This new version of Scribble is open source. Feel free to visit its &lt;a href=&quot;https://github.com/yihangho/scribble&quot;&gt;GitHub page&lt;/a&gt;. Scribble is still under active development - expect more cool features to come in the future. Also, feel free to contribute ideas and report bugs and give feedback. Drop me emails at &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#109;&amp;#101;&amp;#064;&amp;#121;&amp;#105;&amp;#104;&amp;#097;&amp;#110;&amp;#103;&amp;#104;&amp;#111;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#109;&amp;#101;&amp;#064;&amp;#121;&amp;#105;&amp;#104;&amp;#097;&amp;#110;&amp;#103;&amp;#104;&amp;#111;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;. Most importantly, give &lt;a href=&quot;http://scribble.yihangho.com&quot;&gt;Scribble&lt;/a&gt; a try!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/scribble-2.0&quot;&gt;Scribble 2.0&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on September 16, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Phusion Passenger on OS X]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/phusion-passenger-on-os-x" />
  <id>http://www.yihangho.com/phusion-passenger-on-os-x</id>
  <published>2013-09-13T00:00:00+08:00</published>
  <updated>2013-09-13T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;I was introduced &lt;a href=&quot;https://www.phusionpassenger.com/&quot;&gt;Phusion Passenger&lt;/a&gt; long time ago when I started learning Ruby on Rails. It is a web server and application server that is quite popular. Its website boasts that installation is simple and there are only two steps involve. The installation is indeed easy and simple, &lt;em&gt;if&lt;/em&gt; you have are using all the default stuff that come with your OS.&lt;/p&gt;

&lt;p&gt;A little bit of background - I am running OS X 10.8.4 (updating to 10.8.5 at the time of writing), Ruby 2.0.0p247 built by RVM and, most importantly, GCC/G++ 4.8.1. Long story short, GCC/G++ 4.8.1 is causing problem - disable it and use the default GCC/G++ provided by Apple. For me, the default version is 4.2.1.&lt;/p&gt;

&lt;p&gt;What I have done before is to follow the installation guide:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;gem install passenger&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;passenger-install-apache2-module&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;At the end of the compilation, I was asked to add some lines to the configuration file of Apache. So I copied and pasted all those lines to the very end of &lt;code&gt;/etc/apache2/httpd.conf&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Also, there is a suggested snippet to set up virtual host for rail projects. I did that to, and the virtual host serves a dummy application just created by &lt;code&gt;rails new&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sudo apachectl restart&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Visit the virtual host. Browser complains that ‘Oops! Google Chrome could not connect to…’ All the existing virtual hosts that were working are not working anymore.&lt;/li&gt;
  &lt;li&gt;Next I tried &lt;code&gt;httpd -t&lt;/code&gt;. This is the output:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;   httpd: Syntax error on line 513 of /private/etc/apache2/httpd.conf: Cannot load /Users/yihangho/.rvm/gems/ruby-2.0.0-p247/gems/passenger-4.0.17/buildout/apache2/mod_passenger.so into server: dlopen(/Users/yihangho/.rvm/gems/ruby-2.0.0-p247/gems/passenger-4.0.17/buildout/apache2/mod_passenger.so, 10): Symbol not found: __ZNSt3tr18__detail12__prime_listE\n  Referenced from: /Users/yihangho/.rvm/gems/ruby-2.0.0-p247/gems/passenger-4.0.17/buildout/apache2/mod_passenger.so\n  Expected in: flat namespace\n in /Users/yihangho/.rvm/gems/ruby-2.0.0-p247/gems/passenger-4.0.17/buildout/apache2/mod_passenger.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ve been Googling a lot and nobody else seems to have this problem. Until I tried to use all the default tools - this includes GCC/G++. So what I did was to (temporarily) remove &lt;code&gt;/usr/local/bin&lt;/code&gt; from my &lt;code&gt;PATH&lt;/code&gt; variable (most likely they are set in &lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/bash_profile&lt;/code&gt; and/or &lt;code&gt;/etc/paths&lt;/code&gt;), which effectively temporarily remove &lt;em&gt;ALL&lt;/em&gt; homebrew installed application. I have to admit that the proper way is to &lt;code&gt;brew unlink gcc48&lt;/code&gt; then &lt;code&gt;brew link gcc48&lt;/code&gt; at the end. After you have done this, just trigger &lt;code&gt;passenger-install-apache2-module&lt;/code&gt; and all should be good. &lt;img class=&quot;emoji&quot; title=&quot;smile&quot; alt=&quot;smile&quot; src=&quot;https://github.global.ssl.fastly.net/images/icons/emoji/smile.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/phusion-passenger-on-os-x&quot;&gt;Phusion Passenger on OS X&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on September 13, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[CakePHP - JSON and XML response explained]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/cakephp-json-and-xml-response-explained" />
  <id>http://www.yihangho.com/cakephp-json-and-xml-response-explained</id>
  <updated>2013-11-05T00:00:00-00:00</updated>
  <published>2013-09-04T00:00:00+08:00</published>
  
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;I’ve been trying out &lt;a href=&quot;http://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt; lately. The &lt;a href=&quot;http://book.cakephp.org/2.0/en/tutorials-and-examples/blog/blog.html&quot;&gt;getting started tutorial&lt;/a&gt; is very beginner-friendly. However, the &lt;a href=&quot;http://book.cakephp.org/2.0/en/views/json-and-xml-views.html&quot;&gt;guide&lt;/a&gt; on JSON and XML views is not very clear. After fooling around a bit, I finally figured out how it works.&lt;/p&gt;

&lt;h2 id=&quot;making-request&quot;&gt;Making request&lt;/h2&gt;
&lt;p&gt;A single action can be made to respond the beautiful HTML, and also machine-readable JSON and XML. For example, to access the &lt;code&gt;index&lt;/code&gt; action of the &lt;code&gt;posts&lt;/code&gt; controller, we usually request for &lt;a href=&quot;http://www.example.com/posts/index&quot;&gt;http://www.example.com/posts/index&lt;/a&gt;. To request for the JSON or XML version, simply append &lt;code&gt;.json&lt;/code&gt; or &lt;code&gt;.xml&lt;/code&gt; to the end of the action name. For example, &lt;a href=&quot;http://www.example.com/posts/index.json&quot;&gt;http://www.example.com/posts/index.json&lt;/a&gt; or &lt;a href=&quot;http://www.example.com/posts/index.xml&quot;&gt;http://www.example.com/posts/index.xml&lt;/a&gt;. Besides that, you can also add &lt;code&gt;Accept: application/json&lt;/code&gt; or &lt;code&gt;Accept: application/xml&lt;/code&gt; into the request header with or without appending &lt;code&gt;.json&lt;/code&gt; or &lt;code&gt;.xml&lt;/code&gt; to the action name. This can be simulated using curl:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;curl -H Accept:application/json http://www.example.com/posts/index
&lt;span class=&quot;c&quot;&gt;# or&lt;/span&gt;
curl -H Accept:application/xml http://www.example.com/posts/index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;We need to tell CakePHP and the controllers involved to accept and process JSON and XML request. First, add&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;Router::parseExtensions(&amp;#39;json&amp;#39;, &amp;#39;xml&amp;#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;into &lt;code&gt;app/Config/routes.php&lt;/code&gt;. Also, inside the class definition of all the controllers involved (for example in &lt;code&gt;app/Controller/PostsController.php&lt;/code&gt;), insert&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;public $components = array(&amp;#39;RequestHandler&amp;#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In general, there are two ways to ‘tell’ CakePHP how to output the JSON and XML when requested. First method is easier and does not involve another view for JSON and XML; the other does.&lt;/p&gt;

&lt;h2 id=&quot;using-serialize-key&quot;&gt;Using serialize key&lt;/h2&gt;
&lt;p&gt;Suppose we want to encode the following array into JSON and XML:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$output = array(&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	&amp;quot;status&amp;quot; =&amp;gt; &amp;quot;OK&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	&amp;quot;message&amp;quot; =&amp;gt; &amp;quot;You are good&amp;quot;,&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	&amp;quot;content&amp;quot; =&amp;gt; $content&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to first &lt;code&gt;set()&lt;/code&gt; all the keys in the array:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;set(&amp;quot;status&amp;quot;, &amp;quot;OK&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;set(&amp;quot;message&amp;quot;, &amp;quot;You are good&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;set(&amp;quot;content&amp;quot;, $content);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;// Can also set() other variables that might not be used in the JSON or XML string&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;set(&amp;quot;other&amp;quot;, &amp;quot;something&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;set(&amp;quot;stuff&amp;quot;, &amp;quot;else&amp;quot;);&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;// or simply&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;set($output);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then tell CakePHP which keys should appear in the output array:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$this-&amp;gt;set(&amp;quot;_serialize&amp;quot;, array(&amp;quot;status&amp;quot;, &amp;quot;message&amp;quot;, &amp;quot;content&amp;quot;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that other variables set with &lt;code&gt;set()&lt;/code&gt; method will not appear in the JSON or XML output unless they are inside &lt;code&gt;_serialize&lt;/code&gt;d array. Now, if you visit &lt;code&gt;index.json&lt;/code&gt; or &lt;code&gt;index.xml&lt;/code&gt; you can see the output equivalent to &lt;code&gt;json_encode($output, JSON_PRETTY_PRINT);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-views&quot;&gt;Using views&lt;/h2&gt;
&lt;p&gt;I guess for most of the time, the method that does not involve a view should be sufficient. Other times, for example, if you want some data to appear in the HTML version, but not on the JSON and XML version, you might do the necessary data processing in the view. The views for JSON and XML are defined in &lt;code&gt;app/Views/&amp;lt;controller name&amp;gt;/&amp;lt;json or xml&amp;gt;/&amp;lt;action name&amp;gt;.ctp&lt;/code&gt;. For example, &lt;code&gt;app/Views/Posts/json/index.ctp&lt;/code&gt;. To enable the views for JSON and XML, you &lt;em&gt;have&lt;/em&gt; to &lt;strong&gt;disable&lt;/strong&gt; &lt;code&gt;$this-&amp;gt;set(&quot;_serialize&quot;, array(...));&lt;/code&gt;. Also, the view &lt;strong&gt;must&lt;/strong&gt; generate a &lt;strong&gt;valid&lt;/strong&gt; JSON or XML string, or else CakePHP will throw an error.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;// app/Controller/PostsController.php&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;public function index() {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;	$this-&amp;gt;set(&amp;#39;posts&amp;#39;, $this-&amp;gt;Post-&amp;gt;find(&amp;#39;all&amp;#39;));&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;// app/Views/Posts/json/index.ctp&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;unset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;modified&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;example-code&quot;&gt;Example code&lt;/h2&gt;
&lt;p&gt;I have prepared a piece of example code as a continuation of the blog tutorial. The code is available &lt;a href=&quot;https://github.com/yihangho/cakephp-json-xml-response&quot;&gt;here&lt;/a&gt;. You may &lt;code&gt;git checkout no-view&lt;/code&gt; or &lt;code&gt;git checkout custom-view&lt;/code&gt; to see the actual code for the serialize key method and custom view method.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/cakephp-json-and-xml-response-explained&quot;&gt;CakePHP - JSON and XML response explained&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on September 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homebrew and ClamXav]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/homebrew-and-clamxav" />
  <id>http://www.yihangho.com/homebrew-and-clamxav</id>
  <published>2013-08-19T00:00:00+08:00</published>
  <updated>2013-08-19T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; and &lt;a href=&quot;http://www.clamxav.com/&quot;&gt;ClamXav&lt;/a&gt; seem to have a &lt;em&gt;little&lt;/em&gt; disagreement between them. This article is for those who:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;are going to install ClamXav&lt;/li&gt;
  &lt;li&gt;have just installed ClamXav and Homebrew complains something about ownership and permissions&lt;/li&gt;
  &lt;li&gt;have installed ClamXav some time ago and it cannot update anymore &lt;img class=&quot;emoji&quot; title=&quot;worried&quot; alt=&quot;worried&quot; src=&quot;https://github.global.ssl.fastly.net/images/icons/emoji/worried.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are just going to install ClamXav and have Homebrew installed already, please do a &lt;code&gt;brew doctor&lt;/code&gt; and fix all problems first. If you are using TrueCrypt also, you might be interested to read &lt;a href=&quot;http://www.yihangho.com/homebrew-and-truecrypt/&quot;&gt;this article&lt;/a&gt; also.&lt;/p&gt;

&lt;p&gt;Immediately after you have installed ClamXav, do another &lt;code&gt;brew doctor&lt;/code&gt;. Most probably you will get this message (and others if you have not fix them before installing ClamXav):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Warning: The /usr/local directory is not writable.
Even if this directory was writable when you installed Homebrew, other
software may change permissions on this directory. Some versions of the
&quot;InstantOn&quot; component of Airfoil are known to do this.

You should probably change the ownership and permissions of /usr/local
back to your user account.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, just enter the following command and you’re (most likely) good to go.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown `whoami` /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have installed ClamXav and Homebrew some time ago, and ClamXav stops updating, you should continue reading. As we know, ClamXav updates its virus definition every time it is started, but this time, when it is started, &lt;em&gt;very&lt;/em&gt; quickly it says that update completed, but when you run some scans, it complains that virus definition is outdated. In short, ClamXav refuses to update yet it complains that it is outdated. This problem is very likely due to permission issue on &lt;code&gt;/usr/local/clamXav&lt;/code&gt;. This directory should be owned by &lt;code&gt;root&lt;/code&gt;. Maybe you accidentally &lt;code&gt;chown&lt;/code&gt;ed that folder when you attempt to fix some other permission issues. To fix this,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown root /usr/local/clamXav
&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/homebrew-and-clamxav&quot;&gt;Homebrew and ClamXav&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on August 19, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Data attribute with JavaScript and jQuery]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/data-attribute-with-javascript-and-jquery" />
  <id>http://www.yihangho.com/data-attribute-with-javascript-and-jquery</id>
  <updated>2013-11-05T00:00:00-00:00</updated>
  <published>2013-08-18T00:00:00+08:00</published>
  
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;One thing from HTML5 that fascinates me a lot is the &lt;code&gt;data-&lt;/code&gt; attribute. It helps eliminating some clumsiness that happen before HTML5 especially when writing a single-page application. For example, sometimes we need to use a hidden input to store some temporary states. Those data can be stored in the &lt;code&gt;data-&lt;/code&gt; attribute.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;user-id&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fname&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;can be replaced with&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-user-id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fname&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another advantage of &lt;code&gt;data-&lt;/code&gt; attribute is the ability to write unobtrusive JavaScript. If you have seen the HTML code generated by Ruby on Rails, you will understand. Suppose you want to show the user a confirmation box after the user clicked on a link. Without the &lt;code&gt;data-&lt;/code&gt; attribute, we have to do this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.example.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;return confirm(&amp;#39;Are you sure?&amp;#39;);&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is kind of not nice as we have to inline some JavaScript code. With &lt;code&gt;data-&lt;/code&gt; attribute, however, we can do this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.example.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-confirmation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Are you sure?&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;script.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// script.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anchors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anchors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;anchors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anchorOnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anchorOnClickListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, although the second method results in a much longer code, we will also enjoy all the benefits that come with writing obtrusive JavaScript.&lt;/p&gt;

&lt;p&gt;Our beloved jQuery, as expected, handles &lt;code&gt;data-&lt;/code&gt; attributes gracefully. There is a dedicated method to do this - &lt;a href=&quot;http://api.jquery.com/data/&quot;&gt;&lt;code&gt;.data()&lt;/code&gt;&lt;/a&gt;. In the first example, we can retrieve the &lt;code&gt;data-user-id&lt;/code&gt; attribute with&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;user-id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Updating &lt;code&gt;data-&lt;/code&gt; attributes can be done in a similar fashion:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;user-id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;new-user-id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, if you try to inspect the element that you have just updated its &lt;code&gt;data-&lt;/code&gt; attribute, you might notice that the old value is still there. In this case, &lt;code&gt;data-user-id&lt;/code&gt; is still &lt;code&gt;12345&lt;/code&gt; instead of &lt;code&gt;new-user-id&lt;/code&gt;. It turns out that jQuery do not update &lt;code&gt;data-&lt;/code&gt; attributes directly, instead, the new or updated value is stored in a cache variable and is associated with the DOM of the said element. To verify this, use the developer’s console and set then retrieve the &lt;code&gt;data-&lt;/code&gt; attribute.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Insert this part in a HTML file --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;demo-div&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-number=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and enter these into the console, one line after the other&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//You should get 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Check the HTML after entering this line to verify that data-number still appears to be 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//You should get 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what is the impact of the way jQuery is handling &lt;code&gt;data-&lt;/code&gt; attributes? First of all, you &lt;em&gt;cannot&lt;/em&gt; access updated &lt;code&gt;data-&lt;/code&gt; attribute using non-jQuery JavaScript. Continuing the previous example,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Just to make sure it is re-updated using jQuery&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//You will still get 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But the other way works, that it, jQuery can access &lt;code&gt;data-&lt;/code&gt; attributes updated by non-jQuery JavaScript.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Re-update with jQuery&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Update with non-jQuery JavaScript&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Expect 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By using the jQuery &lt;code&gt;.data()&lt;/code&gt; method, you can set any &lt;code&gt;data-&lt;/code&gt; attributes to almost anything, including arrays and objects:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;another&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;World&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In &lt;em&gt;most&lt;/em&gt; cases, the behavior of jQuery shouldn’t be a very big issue. In case it really is, just remember that there is the faithful &lt;code&gt;.attr()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;div#demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;data-number&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Verify that HTML is being updated also&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;demo-div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Expect 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/data-attribute-with-javascript-and-jquery&quot;&gt;Data attribute with JavaScript and jQuery&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on August 18, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Cloud IDE III - Koding]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/cloud-ide-iii-koding" />
  <id>http://www.yihangho.com/cloud-ide-iii-koding</id>
  <published>2013-08-05T00:00:00+08:00</published>
  <updated>2013-08-05T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;https://koding.com/&quot;&gt;Koding&lt;/a&gt; is a very interesting platform due to the fact that it has a Facebook-like newsfeed where all members of Koding get to communicate with each other. The employees of Koding use the newsfeed to announce updates and people will post their feedbacks there. It is a very engaging community. It was quite difficult to get started writing the review for Koding as there are too many updates very quickly. Whenever I started a draft and continue maybe a day or two later, some of the things that I complaint already become irrelevant.&lt;/p&gt;

&lt;h2 id=&quot;pricing&quot;&gt;Pricing&lt;/h2&gt;

&lt;p&gt;The first instance of virtual machine is free of charge, each subsequent VM costs $5 per month. The exact specification of each instance is not known, but from what I can see and feel, $5 is very very reasonable.&lt;/p&gt;

&lt;h2 id=&quot;virtual-machine&quot;&gt;Virtual Machine&lt;/h2&gt;

&lt;p&gt;There is nothing to say much about the VMs - users have &lt;code&gt;sudo&lt;/code&gt; access on their VMs. In other word, there is no language that has a compiler/interpreter for Linux is not supported in Koding. More precisely, the VMs are running Ubuntu 13.04, just get a compiler/interpreter for Ubuntu 13.04 and any exotic language of your choice is working on Koding. However, as I’ve mentioned in the &lt;a href=&quot;http://www.yihangho.com/cloud-ide-ii-nitrous-io/&quot;&gt;review&lt;/a&gt; for &lt;a href=&quot;https://www.nitrous.io/join/_5GqfzMZwkM&quot;&gt;Nitrous.IO&lt;/a&gt;, the terminal of Koding is quite laggy possibly due to network latency. As such, using Vim in Koding won’t be a pleasurable experience.&lt;/p&gt;

&lt;h2 id=&quot;overall-experience&quot;&gt;Overall Experience&lt;/h2&gt;

&lt;p&gt;Koding is supposed to be the most powerful IDE among the IDEs that I am reviewing. However, the overall experience is not excellent. Somehow the whole UI is not very responsive and the VM disconnects quite frequently.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/cloud-ide-iii-koding&quot;&gt;Cloud IDE III - Koding&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on August 05, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Migrating from WordPress to Jekyll]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/migrating-from-wordpress-to-jekyll" />
  <id>http://www.yihangho.com/migrating-from-wordpress-to-jekyll</id>
  <published>2013-08-01T00:00:00+08:00</published>
  <updated>2013-08-01T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;Migrating from WordPress to Jekyll is not hard. There is a &lt;a href=&quot;http://jekyllrb.com/docs/migrations/&quot;&gt;guide&lt;/a&gt; on Jekyll’s official site that describe how to migrate not only from WordPress, but also other platforms. The biggest problem that I have is on redirecting old permalinks to the new one.&lt;/p&gt;

&lt;p&gt;Generally, there are 5 types of permalinks that can be set in WordPress, they are in the form of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;http://www.example.com/?p=123&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;http://www.example.com/2013/10/12/a-blog-post&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;http://www.example.com/2013/10/a-blog-post&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;http://www.example.com/123&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;http://www.example.com/a-blog-post&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From what I observe, the last 4 types are quite easy to handle - just specify the old permalink and the new permalink in &lt;code&gt;.htaccess&lt;/code&gt; to issue a 301 redirection. For example, suppose the old permalink is &lt;code&gt;http://www.example.com/a-blog-post&lt;/code&gt; (the fourth type), and the new permalink is &lt;code&gt;http://www.example.com/new-blog-post&lt;/code&gt;, insert the following to &lt;code&gt;.htaccess&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Redirect 301 /a-blog-post http://www.example.com/new-blog-post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, this method does not work on the first type. I resort to a combination of mod_rewrite and PHP. The general strategy is to capture all URL in the form of &lt;code&gt;http://www.example.com/?p=123&lt;/code&gt; and rewrite it to a PHP file, and this PHP file will, depends on the value of &lt;code&gt;p&lt;/code&gt;, redirect the user to the new permalink.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteCond %{QUERY_STRING} ^(?!\s*$).+
RewriteRule ^$ http://www.example.com/redirect.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line basically means that there must be something in the query string in order to continue, and the next line means that if the path is empty, then load &lt;code&gt;http://www.example.com/redirect.php&lt;/code&gt; with all the query string intact. Notice that you might want to alter the regular expressions to capture &lt;em&gt;only&lt;/em&gt; the path in the form of &lt;code&gt;http://www.example.com/?p=123&lt;/code&gt;. I recommend &lt;a href=&quot;http://htaccess.madewithlove.be/&quot;&gt;this&lt;/a&gt; to test your regular expression.&lt;/p&gt;

&lt;p&gt;Next, we need to prepare &lt;code&gt;redirect.php&lt;/code&gt; to redirect the user to the correct location.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//$redirect_map should contain all the new permalinks such that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//$redirect_map[old_perma] = new_perma&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$redirect_map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.example.com/new-blog-post&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.example.com/another-new-post&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;array_key_exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$redirect_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Location: &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$redirect_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Location: http://www.example.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Location: http://www.example.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to add all the permalinks into &lt;code&gt;$redirect_map&lt;/code&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/migrating-from-wordpress-to-jekyll&quot;&gt;Migrating from WordPress to Jekyll&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on August 01, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Why is web development cool]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/why-is-web-development-cool" />
  <id>http://www.yihangho.com/why-is-web-development-cool</id>
  <published>2013-07-28T00:00:00+08:00</published>
  <updated>2013-07-28T00:00:00+08:00</updated>
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;I started doing serious web development early this year. At first I wrote a very simple content management system for a educational project initiated by University of Science, Malaysia, then, I started my internship with a web development company. Since then, I have invested most of my coding time doing web-related stuff. In my free time, I produced &lt;a href=&quot;http://scribble.yihangho.com&quot;&gt;Scribble&lt;/a&gt; and &lt;a href=&quot;http://goo.gl/fMifL&quot;&gt;CoRate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think web development is both easier and harder than non-web development. It is easier in the sense that it is &lt;em&gt;very&lt;/em&gt; portable. Unless you are using very cutting edge APIs, most likely the code that you wrote on, say, Linux will also work on Windows, OS X, and very likely Android and iOS also. Compared to non-web development, although languages like C++ promise maximal portability, most of the time, there are some components, like the GUI as an example, are platform dependent. Having said that, in some sense, web development can be harder than non-web development. Portability is sometimes an issue in web development due to the many varieties of web browsers and a very small percentage of users still using very outdated. (People, please update your browsers so that you &lt;a href=&quot;http://browsehappy.com/&quot;&gt;browse happy&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Being either easier or harder is not the reason I love web development. One of the most important reasons is the web development is full of surprises. The more I develop for web, the more potential for web I realize, especially in these few years where HTML5 and CSS3 are introduced and getting more and more popular. Previously, stuff that were impossible or required some ugly plugins to work, now work with pure HTML, CSS and JavaScript. For example, YouTube used to depends on Flash to play videos, now, it is possible to watch YouTube videos with &lt;a href=&quot;http://www.youtube.com/html5&quot;&gt;their HTML5 player&lt;/a&gt;. Also, it is now possible to produce what we used to call “Flash Games” using &lt;em&gt;only&lt;/em&gt; HTML, CSS and JavaScript. For instance, &lt;a href=&quot;http://canvasrider.com/&quot;&gt;Canvas Rider&lt;/a&gt; was one of the first games I found that is powered by HTML, CSS and JavaScript only.&lt;/p&gt;

&lt;p&gt;Besides these consumer product, there are also a lot of surprises for me as a developer. At first, I knew only &lt;em&gt;pure&lt;/em&gt; JavaScript - written without any libraries, using all those &lt;code&gt;getElementById&lt;/code&gt; and the like. Soon, I found &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt; and &lt;a href=&quot;http://jqueryui.com/&quot;&gt;jQuery UI&lt;/a&gt; with its super intuitive APIs. Then, I found &lt;a href=&quot;http://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt;, &lt;a href=&quot;http://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; and others. Being a person with absolutely no idea how to design, &lt;a href=&quot;http://twitter.github.io/bootstrap/&quot;&gt;Bootstrap&lt;/a&gt; truly made my life easier. Included with Bootstrap is a free version of &lt;a href=&quot;http://glyphicons.getbootstrap.com/&quot;&gt;Glyphicon&lt;/a&gt;. From there I found &lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot;&gt;Font Awesome&lt;/a&gt;, which is a open-source version of Glyphicon. And my discoveries continue…&lt;/p&gt;

&lt;p&gt;By using just a few words, I think I love web development due to its potential, especially in the era where people own several devices and cloud and web is the only way to connect each of these devices.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/why-is-web-development-cool&quot;&gt;Why is web development cool&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on July 28, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Jekyll]]></title>
  <link rel="alternate" type="text/html" href="http://www.yihangho.com/jekyll" />
  <id>http://www.yihangho.com/jekyll</id>
  <updated>2013-11-05T00:00:00-00:00</updated>
  <published>2013-07-27T00:00:00+08:00</published>
  
  <author>
    <name>Yihang Ho</name>
    <uri>http://www.yihangho.com</uri>
    <email>me@yihangho.com</email>
  </author>
  <content type="html">&lt;p&gt;You might or might not have noticed that this blog is somehow changed. That is right, I’ve switch from WordPress to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. One of the many reasons that I decide to switch to Jekyll is that I can blog in Markdown using Jekyll. Of course, there &lt;em&gt;must&lt;/em&gt; be some plugins available for WordPress that allows me to write in Markdown, but the hacker inside me is shouting - WordPress just doesn’t suit me.&lt;/p&gt;

&lt;p&gt;To those who don’t know what Jekyll is, Jekyll is a (according to their website) simple, blog-aware static site generator. In other words, each and every single page consists of only HTML - there is no PHP or Rails or anything like that to generate HTML content when requested. Jekyll’s role is to compile the entire site according to the rules and templates that I have provided. The web server serving sites generated by Jekyll can be very minimal as there is no server side processing at all.&lt;/p&gt;

&lt;p&gt;At first, I thought thought that the generated site will be quite large - considering the repetition in the template. Quite surprisingly, the generated site is &lt;em&gt;very&lt;/em&gt; small. Before I wrote this post, I’ve migrated almost all the posts from WordPress, and using the same theme that I was using in WordPress, except ported over for Jekyll. The entire site is only about 160KB. Compared to WordPress, the compressed tarball is almost 5MB, then there are the contents stored in database.&lt;/p&gt;

&lt;p&gt;For a developer’s point of view, designing a theme (the proper term should be template) for Jekyll is extremely easy. The easy yet powerful APIs provided allows me to port the theme that I was using in under 2 hours.&lt;/p&gt;

&lt;p&gt;If you are curious how I configured Jekyll for this site, I am using &lt;a href=&quot;https://github.com/bhollis/maruku&quot;&gt;Maruku&lt;/a&gt; as the Markdown interpreter, installed a customized version of &lt;a href=&quot;https://github.com/chriskempson/jekyll-emoji&quot;&gt;Jekyll Emoji&lt;/a&gt; and the template is &lt;a href=&quot;https://github.com/yihangho/mog-jekyll-port&quot;&gt;Mog for Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, enjoy the very first post that I have ever written in Markdown. More to come.&lt;/p&gt;

&lt;h2 id=&quot;update&quot;&gt;Update&lt;/h2&gt;
&lt;p&gt;Now I am using &lt;a href=&quot;http://kramdown.rubyforge.org/&quot;&gt;Kramdown&lt;/a&gt; as the Markdown interpreter, and the template is &lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;Minimal Mistakes&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://www.yihangho.com/jekyll&quot;&gt;Jekyll&lt;/a&gt; was originally published by Yihang Ho at &lt;a href=&quot;http://www.yihangho.com&quot;&gt;I am Yihang&lt;/a&gt; on July 27, 2013.&lt;/p&gt;</content>
</entry>

</feed>
